{"ast":null,"code":"// define methods that takes place on receiving those action\nimport * as actionTypes from './actionTypes';\nimport axios from 'axios'; // actions are executed with dispatch and return a type and maybe other args to\n// reducers\n// when working with actions the objects that need to return always need to\n// return a type. Therefore, type property needs to be include\n\nexport var authStart = function authStart() {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport var authSuccess = function authSuccess(token) {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport var authFail = function authFail(error) {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n}; // this function requires 2 parameters from djangorestframework, currently we\n// know 2 parameters but these would be initialized once django backend is setup\n\nexport var authLogin = function authLogin(username, password) {\n  // when we login we have to return a dispatch\n  return function (dispatch) {\n    dispatch(authStart());\n    axios.post(' http://127.0.0.1:8000/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(function (res) {\n      // response we will receive a key that is return form djangorestframework\n      var token = res.data.key; // setting up an expirationDate to one hour\n\n      var expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate); // if res is successful dispatch authSuccess method with toke as args\n\n      dispatch(authSuccess(token));\n      console.log('after success'); // 3600 seconds times 1000 gives 1hr\n\n      dispatch(checkAuthTimeout(3600));\n    }).catch(function (err) {\n      console.log(authFail(err));\n      dispatch(authFail(err));\n    });\n  };\n};\nexport var logout = function logout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nvar checkAuthTimeout = function checkAuthTimeout(expirationTime) {\n  // setTimeout will be in millisecond so need to turn seconds into milliseconds\n  return function (dispatch) {\n    setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport var authCheckState = function authCheckState() {\n  // check if token is store at local storage if not logout\n  // if it is revaluate localStorage\n  return function (dispatch) {\n    var token = localStorage.getItem('token');\n\n    if (token === 'undefined') {\n      dispatch(logout);\n    } else {\n      var expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n}; // these methods are important because they are events that signals so that you\n// can do something else","map":{"version":3,"sources":["/Users/mateosixtos/Documents/businessDock/frontend/gui/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","authLogin","username","password","dispatch","post","then","res","data","key","expirationDate","Date","getTime","localStorage","setItem","console","log","checkAuthTimeout","catch","err","logout","removeItem","AUTH_LOGOUT","expirationTime","setTimeout","authCheckState","getItem"],"mappings":"AAAA;AAEA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AAIA;AACA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAK;AAC5B,SAAM;AACJC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AADd,GAAN;AAGD,CAJM;AAMP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAG;AACjC,SAAM;AACJH,IAAAA,IAAI,EAAEH,WAAW,CAACO,YADd;AAEJD,IAAAA,KAAK,EAAEA;AAFH,GAAN;AAID,CALM;AAOP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAG;AAC9B,SAAM;AACJN,IAAAA,IAAI,EAAEH,WAAW,CAACU,SADd;AAEJD,IAAAA,KAAK,EAAEA;AAFH,GAAN;AAID,CALM,C,CAOP;AACA;;AACA,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAWC,QAAX,EAAuB;AAC9C;AACA,SAAO,UAAAC,QAAQ,EAAE;AACfA,IAAAA,QAAQ,CAACZ,SAAS,EAAV,CAAR;AAEAD,IAAAA,KAAK,CAACc,IAAN,CAAW,yCAAX,EAAsD;AACpDH,MAAAA,QAAQ,EAAEA,QAD0C;AAEpDC,MAAAA,QAAQ,EAAEA;AAF0C,KAAtD,EAICG,IAJD,CAIM,UAAAC,GAAG,EAAE;AACT;AACA,UAAMX,KAAK,GAAGW,GAAG,CAACC,IAAJ,CAASC,GAAvB,CAFS,CAIT;;AACA,UAAMC,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAsB,OAAO,IAAtC,CAAvB;AAEAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BlB,KAA9B;AACAiB,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCJ,cAAvC,EARS,CAUT;;AACAN,MAAAA,QAAQ,CAACT,WAAW,CAACC,KAAD,CAAZ,CAAR;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAZS,CAaT;;AACAZ,MAAAA,QAAQ,CAACa,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AAED,KApBD,EAqBCC,KArBD,CAqBO,UAAAC,GAAG,EAAI;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAQ,CAACqB,GAAD,CAApB;AACAf,MAAAA,QAAQ,CAACN,QAAQ,CAACqB,GAAD,CAAT,CAAR;AACH,KAxBD;AAyBD,GA5BD;AA6BD,CA/BM;AAiCP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAK;AAEzBP,EAAAA,YAAY,CAACQ,UAAb,CAAwB,OAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,gBAAxB;AACA,SAAM;AACF5B,IAAAA,IAAI,EAAEH,WAAW,CAACgC;AADhB,GAAN;AAID,CARM;;AAUP,IAAML,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAM,cAAc,EAAG;AACxC;AACA,SAAO,UAAAnB,QAAQ,EAAG;AAEhBoB,IAAAA,UAAU,CAAC,YAAI;AACXpB,MAAAA,QAAQ,CAACgB,MAAM,EAAP,CAAR;AACH,KAFS,EAEPG,cAAc,GAAG,IAFV,CAAV;AAGD,GALD;AAMD,CARD;;AAYA,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAK;AACjC;AACA;AACA,SAAO,UAAArB,QAAQ,EAAE;AACf,QAAMR,KAAK,GAAGiB,YAAY,CAACa,OAAb,CAAqB,OAArB,CAAd;;AAEA,QAAG9B,KAAK,KAAK,WAAb,EAAyB;AACvBQ,MAAAA,QAAQ,CAACgB,MAAD,CAAR;AACD,KAFD,MAGI;AACF,UAAMV,cAAc,GAAG,IAAIC,IAAJ,CAASE,YAAY,CAACa,OAAb,CAAqB,gBAArB,CAAT,CAAvB;;AAEA,UAAGhB,cAAc,IAAI,IAAIC,IAAJ,EAArB,EAAgC;AAC9BP,QAAAA,QAAQ,CAACgB,MAAM,EAAP,CAAR;AACD,OAFD,MAGI;AACFhB,QAAAA,QAAQ,CAACT,WAAW,CAACC,KAAD,CAAZ,CAAR;AACAQ,QAAAA,QAAQ,CAACa,gBAAgB,CAAE,CAACP,cAAc,CAACE,OAAf,KAA2B,IAAID,IAAJ,GAAWC,OAAX,EAA5B,IAAoD,IAAtD,CAAjB,CAAR;AACD;AACF;AACF,GAjBD;AAkBD,CArBM,C,CAwBP;AACE","sourcesContent":["// define methods that takes place on receiving those action\n\nimport * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\n// actions are executed with dispatch and return a type and maybe other args to\n// reducers\n\n\n\n// when working with actions the objects that need to return always need to\n// return a type. Therefore, type property needs to be include\nexport const authStart = () =>{\n  return{\n    type: actionTypes.AUTH_START\n  }\n}\n\nexport const authSuccess = token =>{\n  return{\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  }\n}\n\nexport const authFail = error =>{\n  return{\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  }\n}\n\n// this function requires 2 parameters from djangorestframework, currently we\n// know 2 parameters but these would be initialized once django backend is setup\nexport const authLogin = (username, password) =>{\n  // when we login we have to return a dispatch\n  return dispatch=>{\n    dispatch(authStart());\n\n    axios.post(' http://127.0.0.1:8000/rest-auth/login/', {\n      username: username,\n      password: password\n    })\n    .then(res=>{\n      // response we will receive a key that is return form djangorestframework\n      const token = res.data.key;\n\n      // setting up an expirationDate to one hour\n      const expirationDate = new Date(new Date().getTime() +3600 * 1000);\n\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n\n      // if res is successful dispatch authSuccess method with toke as args\n      dispatch(authSuccess(token));\n      console.log('after success');\n      // 3600 seconds times 1000 gives 1hr\n      dispatch(checkAuthTimeout(3600));\n\n    })\n    .catch(err => {\n        console.log(authFail(err))\n        dispatch(authFail(err))\n    })\n  }\n}\n\nexport const logout = () =>{\n\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return{\n      type: actionTypes.AUTH_LOGOUT\n  }\n\n}\n\nconst checkAuthTimeout = expirationTime =>{\n  // setTimeout will be in millisecond so need to turn seconds into milliseconds\n  return dispatch =>{\n\n    setTimeout(()=>{\n        dispatch(logout());\n    }, expirationTime * 1000)\n  }\n}\n\n\n\nexport const authCheckState = () =>{\n  // check if token is store at local storage if not logout\n  // if it is revaluate localStorage\n  return dispatch=>{\n    const token = localStorage.getItem('token');\n\n    if(token === 'undefined'){\n      dispatch(logout);\n    }\n    else{\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if(expirationDate <= new Date()){\n        dispatch(logout());\n      }\n      else{\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout( (expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  }\n}\n\n\n// these methods are important because they are events that signals so that you\n  // can do something else\n"]},"metadata":{},"sourceType":"module"}