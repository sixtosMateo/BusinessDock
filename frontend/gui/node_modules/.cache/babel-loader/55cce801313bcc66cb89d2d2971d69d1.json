{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility'; // here we define our initial state\n// ex: loading any errors, authentication token\n// reducers recieved in the reducer as one of the params then the reducer method\n// (at the botton) taking in all the actions. Determines the type of action\n\nvar initialState = {\n  token: null,\n  error: null,\n  loading: false // defining our actions\n  // recreating the methods that go hand to hand with our actions\n  // must return state that is updated\n\n};\n\nvar authStart = function authStart(state, action) {\n  // what updateObject() method is doing is when we start we set\n  // error to null and loading to true -> spinner will start spinning\n  return updateObject(state, {\n    error: null,\n    loading: true\n  });\n};\n\nvar authSuccess = function authSuccess(state, action) {\n  // action is from action/actionTypes authSuccess one parameter is token & returns\n  // an object therefore being able to grab the token here\n  return updateObject(state, {\n    token: action.token,\n    error: null,\n    loading: false\n  });\n};\n\nvar authFail = function authFail(state, action) {\n  return updateObject(state, {\n    error: action.error,\n    loading: false\n  });\n};\n\nvar authLogout = function authLogout(state, action) {\n  return updateObject(state, {\n    token: null\n  });\n}; //define the methods where they take place\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n      return authStart(state, action);\n\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccess(state, action);\n\n    case actionTypes.AUTH_FAIL:\n      return authFail(state, action);\n\n    case actionTypes.AUTH_LOGOUT:\n      return authLogout(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mateosixtos/Documents/businessDock/frontend/gui/src/store/reducers/auth.js"],"names":["actionTypes","updateObject","initialState","token","error","loading","authStart","state","action","authSuccess","authFail","authLogout","reducer","type","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,YAA7B,C,CAEA;AACI;AAEJ;AACA;;AAEA,IAAMC,YAAY,GAAG;AAClBC,EAAAA,KAAK,EAAE,IADW;AAElBC,EAAAA,KAAK,EAAE,IAFW;AAGlBC,EAAAA,OAAO,EAAE,KAHS,CAMrB;AACA;AAEA;;AATqB,CAArB;;AAUA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC;AACE;AACF,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACzBH,IAAAA,KAAK,EAAE,IADkB;AAEzBC,IAAAA,OAAO,EAAE;AAFgB,GAAR,CAAnB;AAIH,CAPD;;AAUA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACF,KAAD,EAAQC,MAAR,EAAmB;AACnC;AACE;AACF,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACzBJ,IAAAA,KAAK,EAAEK,MAAM,CAACL,KADW;AAEzBC,IAAAA,KAAK,EAAE,IAFkB;AAGzBC,IAAAA,OAAO,EAAE;AAHgB,GAAR,CAAnB;AAKH,CARD;;AAYA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACH,KAAD,EAAQC,MAAR,EAAmB;AAChC,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACzBH,IAAAA,KAAK,EAAEI,MAAM,CAACJ,KADW;AAEzBC,IAAAA,OAAO,EAAE;AAFgB,GAAR,CAAnB;AAIH,CALD;;AASA,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACJ,KAAD,EAAQC,MAAR,EAAmB;AAClC,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACzBJ,IAAAA,KAAK,EAAE;AADkB,GAAR,CAAnB;AAGH,CAJD,C,CAQA;;;AACA,IAAMS,OAAO,GAAG,SAAVA,OAAU,GAA+B;AAAA,MAA9BL,KAA8B,uEAAxBL,YAAwB;AAAA,MAAVM,MAAU;;AAC7C,UAAQA,MAAM,CAACK,IAAf;AACI,SAAKb,WAAW,CAACc,UAAjB;AAA6B,aAAOR,SAAS,CAACC,KAAD,EAAQC,MAAR,CAAhB;;AAC7B,SAAKR,WAAW,CAACe,YAAjB;AAA+B,aAAON,WAAW,CAACF,KAAD,EAAQC,MAAR,CAAlB;;AAC/B,SAAKR,WAAW,CAACgB,SAAjB;AAA4B,aAAON,QAAQ,CAACH,KAAD,EAAQC,MAAR,CAAf;;AAC5B,SAAKR,WAAW,CAACiB,WAAjB;AAA8B,aAAON,UAAU,CAACJ,KAAD,EAAQC,MAAR,CAAjB;;AAC9B;AACE,aAAOD,KAAP;AANN;AAQD,CATD;;AAWA,eAAeK,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\n// here we define our initial state\n    // ex: loading any errors, authentication token\n\n// reducers recieved in the reducer as one of the params then the reducer method\n// (at the botton) taking in all the actions. Determines the type of action\n\nconst initialState = {\n   token: null,\n   error: null,\n   loading: false\n}\n\n// defining our actions\n// recreating the methods that go hand to hand with our actions\n\n// must return state that is updated\nconst authStart = (state, action) => {\n    // what updateObject() method is doing is when we start we set\n      // error to null and loading to true -> spinner will start spinning\n    return updateObject(state, {\n      error: null,\n      loading: true\n    });\n}\n\n\nconst authSuccess = (state, action) => {\n    // action is from action/actionTypes authSuccess one parameter is token & returns\n      // an object therefore being able to grab the token here\n    return updateObject(state, {\n      token: action.token,\n      error: null,\n      loading: false\n    });\n}\n\n\n\nconst authFail = (state, action) => {\n    return updateObject(state, {\n      error: action.error,\n      loading: false\n    })\n}\n\n\n\nconst authLogout = (state, action) => {\n    return updateObject(state, {\n      token: null\n    })\n}\n\n\n\n//define the methods where they take place\nconst reducer = (state=initialState, action) =>{\n  switch (action.type) {\n      case actionTypes.AUTH_START: return authStart(state, action);\n      case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\n      case actionTypes.AUTH_FAIL: return authFail(state, action);\n      case actionTypes.AUTH_LOGOUT: return authLogout(state, action);\n      default:\n        return state;\n  }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}